#!/usr/bin/env python3

from sys import exit
import gi
gi.require_version('ALSATimer', '0.0')
from gi.repository import ALSATimer

class_types = (
    'NONE',
    'GLOBAL',
    'CARD',
    'PCM',
)

slave_class_types = (
    'NONE',
    'APPLICATION',
    'SEQUENCER',
)

specific_global_devices = (
    'SYSTEM',
    'HRTIMER',
)

device_info_flags = (
    'SLAVE',
)

instance_param_flags = (
    'AUTO',
    'EXCLUSIVE',
    'EARLY_EVENT',
)

event_types = (
    'RESOLUTION',
    'TICK',
    'START',
    'STOP',
    'CONTINUE',
    'PAUSE',
    'EARLY',
    'SUSPEND',
    'RESUME',
    'MSTART',
    'MSTOP',
    'MCONTINUE',
    'MPAUSE',
    'MSUSPEND',
    'MRESUME',
)

event_data_types = (
    'TICK',
    'TSTAMP',
)

user_instance_error_types = (
    'FAILED',
    'TIMER_NOT_FOUND',
    'NOT_ATTACHED',
)

types = {
    ALSATimer.Class:                class_types,
    ALSATimer.SlaveClass:           slave_class_types,
    ALSATimer.SpecificGlobalDevice: specific_global_devices,
    ALSATimer.DeviceInfoFlag:       device_info_flags,
    ALSATimer.InstanceParamFlag:    instance_param_flags,
    ALSATimer.EventType:            event_types,
    ALSATimer.EventDataType:        event_data_types,
    ALSATimer.UserInstanceError:    user_instance_error_types,
}

for obj, types in types.items():
    for t in types:
        if not hasattr(obj, t):
            print('Enumerator {0} is not produced.'.format(t))
            exit(1)
