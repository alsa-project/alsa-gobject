#!/usr/bin/env python3

import gi
gi.require_version('GLib', '2.0')
gi.require_version('ALSATimer', '0.0')
gi.require_version('ALSASeq', '0.0')
from gi.repository import GLib, ALSATimer, ALSASeq

from signal import SIGINT

# Register my client.
client = ALSASeq.UserClient.new()
client.open(0)

# Register client information.
info = ALSASeq.ClientInfo.new()
info.set_property('name', 'focal')
client.set_info(info)

# Dump client information.
_, info = client.get_info(info)
print('The information of client:')
print('  type: {}'.format(info.get_property('type').value_nick))
print('  filter-attributes: {}'.format(info.get_property('filter-attributes').value_nicks))
for prop in ('client-id', 'name', 'use-filter', 'port-count', 'lost-count',
             'card-id', 'process-id'):
    print('  {}: {}'.format(prop, info.get_property(prop)))

# Add my port.
info = ALSASeq.PortInfo.new()
info.set_property('name', 'fossa')
caps = (ALSASeq.PortCapFlag.READ |
        ALSASeq.PortCapFlag.WRITE |
        ALSASeq.PortCapFlag.DUPLEX |
        ALSASeq.PortCapFlag.SUBS_READ |
        ALSASeq.PortCapFlag.SUBS_WRITE)
info.set_property('caps', caps)
attrs = (ALSASeq.PortAttrFlag.MIDI_GENERIC |
         ALSASeq.PortAttrFlag.SOFTWARE |
         ALSASeq.PortAttrFlag.APPLICATION)
info.set_property('attrs', attrs)
_, info = client.create_port(info)

# Dump port information.
print('The information of port:')
for prop in ('name', 'midi-channels', 'midi-voices', 'synth-voices',
             'read-users', 'write-users', 'tstamp-overwrite', 'queue-id'):
    print('  {}: {}'.format(prop, info.get_property(prop)))
for prop in ('caps', 'attrs'):
    print('  {}: {}'.format(prop, info.get_property(prop).value_nicks))
addr = info.get_property('addr')
print('  addr:', addr.get_client_id(), addr.get_port_id())
port_id = addr.get_port_id()

# Register my queue.
info = ALSASeq.QueueInfo.new()
info.set_property('name', '20.04')
info.set_property('client-id', client.get_property('client-id'))
info.set_property('locked', True)
_, info = client.create_queue(info)

# Dump queue information.
print('The information of queue:')
for prop in ('name', 'queue-id', 'client-id', 'locked'):
    print('  {}: {}'.format(prop, info.get_property(prop)))
queue_id = info.get_property('queue-id')

# Prepare two events; one to start the queue, another to deliver on the queue.
events = []

ev = ALSASeq.Event.new(ALSASeq.EventType.START)
ev.set_time_mode(ALSASeq.EventTimeMode.REL)
ev.set_priority_mode(ALSASeq.EventPriorityMode.NORMAL)
ev.set_tag(0)
ev.set_queue_id(ALSASeq.SpecificQueueId.DIRECT)
dst = ALSASeq.Addr.new(ALSASeq.SpecificClientId.SYSTEM,
                       ALSASeq.SpecificPortId.TIMER)
ev.set_destination(dst)
src = ALSASeq.Addr.new(client.get_property('client-id'), 0)
ev.set_source(src)
_, data = ev.get_queue_data()
data.set_queue_id(queue_id)
ev.set_queue_data(data)
events.append(ev)

ev = ALSASeq.Event.new(ALSASeq.EventType.CONTROLLER)
ev.set_time_mode(ALSASeq.EventTimeMode.REL)
ev.set_priority_mode(ALSASeq.EventPriorityMode.NORMAL)
ev.set_tag(10)
ev.set_queue_id(queue_id)
dst = ALSASeq.Addr.new(client.get_property('client-id'), 0)
ev.set_destination(dst)
src = ALSASeq.Addr.new(client.get_property('client-id'), 0)
ev.set_source(src)
events.append(ev)

# Schedule the events.
_, count = client.schedule_events(events)
print('scheduled:', count)

# Register event handler.
def handle_event(client, ev_cntr):
    events = ev_cntr.deserialize()
    for i, ev in enumerate(events):
        print('  Event {}:'.format(i))
        ev_type = ev.get_event_type()
        print('    type:', ev_type.value_nick)
        tstamp_mode = ev.get_tstamp_mode()
        print('    tstamp-mode:', tstamp_mode.value_nick)
        time_mode = ev.get_time_mode()
        print('    time-mode:', time_mode.value_nick)
        length_mode = ev.get_length_mode()
        print('    length-mode:', length_mode.value_nick)
        priority_mode = ev.get_priority_mode()
        print('    priority-mode:', priority_mode.value_nick)
        tag = ev.get_tag()
        print('    tag:', tag)
        queue_id = ev.get_queue_id()
        print('    queue-id:', queue_id)
        if tstamp_mode == ALSASeq.EventTstampMode.TICK:
            _, tick_time = ev.get_tick_time()
            print('    tick-time:', tick_time)
        else:
            _, real_time = ev.get_real_time()
            print('    real-time:', real_time)
        dst = ev.get_destination()
        print('    dst:', dst.get_client_id(), dst.get_port_id())
        src = ev.get_source()
        print('    src:', src.get_client_id(), src.get_port_id())
client.connect('handle-event', handle_event)

# Create event dispatcher.
dispatcher = GLib.MainLoop.new(None, False)
_, src = client.create_source()
src.attach(dispatcher.get_context())

# Register UNIX signal handler.
GLib.unix_signal_add(GLib.PRIORITY_DEFAULT, SIGINT, lambda d: d.quit(),
                     dispatcher)

# Start to dispatch events.
dispatcher.run()

# Stop the queue.
ev = ALSASeq.Event.new(ALSASeq.EventType.STOP)
ev.set_queue_id(queue_id)
client.schedule_event(ev)

# Delete the queue.
client.delete_queue(queue_id)

# Delete the port
client.delete_port(port_id)
